먼저! 
** HTML(Hypertext Markup Language)이란?
웹을 이루는 가장 기초적인 구성 요소로, 웹 콘텐츠의 의미와 구조를 정의할때 사용한다.
프로그래밍 언어가 아니라, 콘텐츠의 구조를 정의하는 마크업 언어이다. 컨텐츠의 서로 다른 부분들을 씌우거나(wrap) 
감싸서(enclose) 다른 형식으로 보이게하거나 특정한 방식으로 동작하도록 하는 일련의 요소(elements)로 이루어져 있다.

** Hypertext란? 
웹 페이지를 다른 페이지로 연결하는 링크

  <h1>    안녕하세용    </h1>
여는태그 + 컨텐츠  +  닫는 태그  = 요소(element)

** 속성
요소는 속성을 가질 수 있는데 항상 가져야 하는 것이 존재
1. 요소이름과 속성 사이에 공백이 있어야 함
2. 속성 이름 뒤에 등호(=)
3. 속성 값의 앞 뒤에 열고 닫는 인용부호(" or ')가 있어야함
===> <h1 align="center"> hi </h1>

** 요소를 다른 요소 안에 놓을 수 있음, 중첩(nesting)이라 부름!

** 요소들의 내용이 필요하는 요소가 있다, 빈 요소(empty elements)
어디까지가 그 태그의 내용이라고 지정할 필요가 없기때문에 아예 닫는 태그를 안적거나 단일 태그 끝에 /를 쳐준다.
===> <img src="내가가지고오고싶은사진주소" />

** HTML 페이지 구성

<!DOCTYPE html>
웹문서가 어떤 버전의 HTML 언어로 작성되었는지 결정하는 기능
선언의 목적으로는 호환성을 높이기 위해서이다. 과거 html버전에서는 해당 버전에 맞게 문법을 검사하고 현재 버전에서는 현재 기준에 맞게 검사하는 기능!
※ 구버전을 폐지하는 이유는 과거 웹 자료의 보전 목적을 위해

<html></html> 
페이지 전체의 컨텐츠를 감싸며, 루트(root)요소라 불림

<head></head>
html페이지에 포함되어 있는 모든 것들(페이지를 조회하는 사람들에게 보여주지 않을 컨텐츠)의 컨테이너 역할, 
페이지 설명, 꾸미기를 위한 css 등

<body></body>
페이지에 방문한 모든 웹 사용자들에게 보여주길 원하는 모든 컨텐츠를 담고 있음

<meta charset="utf-8">
문서가 사용해야할 문서 집합!

<title></title>
페이지의 제목 설정, 페이지가 로드되는 브라우저의 탭에 제목이 표시됨

================================================================================================================================================================

<img src="이미지경로" alt="이미지에 대한 설명문">
※ alt는 시각장애인을 위한 읽어주고, 오류 발생시 나타나는 설명문!

<h1~h6> my html! </h1~h6>
제목요소는 내용의 특정 부분이 제목 또는 내용의 하위 제목임을 구체화 할 수 있게 해준다.

<p> 문단! </p> 
문자의 문단을 포함, 일반적으로 문자 내용을 나타낼 때 사용

순서 없는 목록(필요한 목록을 나열하듯 순서에 관계없는) <ul>
순서 있는 리스트(조리법!) <ol>
=> 목록의 각 항목은 <li>(목록 항목) 요소 안에 작성되야함!

<a href="https://www.naver.com">네이버</a>
속성인 href는 hypertext reference(하이퍼 텍스트 참조)를 뜻함

사용자가 웹 페이지에 머무는 시간은 10-20초로 평균 1분 미만임
사용자의 관심을 얻기위해서는 10초 이내의 가치를 명확히 보여줘야함

제목의 내용은 검색 순위에 영향을 미치는 중요한 키워드로, 
제목이 없다면 페이지가 SEO(검색 엔진 최적화) 측면에서 좋지 않음
※ SEO란? 검색 결과에서 웹사이트를 더 잘 보이게 하는 프로세스, 검색 순위 향상이라고도 함

스크린 리더란? 텍스트 및 이미지 콘텐츠를 음성 또는 점자 출력으로 렌더링하는 보조 기술의 한 형태
		시각장애인, 문맹 또는 학습 장애가 있는 사람들을 도와줌

절대 URL - 프로토콜 및 도메인 이름을 포함하여 웹상의 절대 위치로 정의된 위를 가르킨다. 
	  사용위치에 관계없이 항상 동일한 위치를 가르킨다.
상대 URL - 참조하는 파일의 실제 위치에 따라 다른 위치를 가르킨다. 
==> 명확한 링크 문구를 사용하여 사용자가 쉽게 사용할 수 있도록 해야한다.

==========접근성 마인드를 유지하자, 사용자의 입장에서=============

참고 요소
<dl>설명 목록
<dt>설명 용어
<dd>설명 정의

========================================================================
HTML 레아웃 요소

<main> 페이지의 고유한 콘텐츠용, 페이지당 한번만 사용
<article> 자체적으로 의미가 있는 관련 콘텐츠 블록 묶기
<section> article과 비슷하지만 하나의 기능 또는 테마를 구성하는 페이지의 단일 부분을 함꼐 그룹화하는데 적합
<aside> 콘텐츠와 간접적으로 관련, 추가 정보를 제공할 수 있는 콘텐츠(용어집 항목, 저자 약력 등)를 포함
<header> 소개 콘텐츠 그룹
<nav> 페이지의 기본 탐색 기능, 보조 링크 등은 미포함
<footer> 페이지의 최종 콘텐츠 그룹

※ 의미론적 가치가 없는 코드는 최소로 줄여야 문서를 업데이트하고 유지 관리하는데 어려움을 줄일 수 있다.

※ 태그는 소스 코드에서의 요소를 시작하거나 종료하는 반면, 
   요소는 브라우저에 페이지를 표시하기 위한 문서 모델인 ㅇDOM의 일부이다.

<br> 줄바꿈
<hr> 주제별 구분 요소(선)

구문 오류 : 코드의 철자 또는 구두점 오류
논리 오류 : 구문은 정확하기만 코드가 의도한 것과 다른 오류
=> 구문 오류가 있다해서 실행이 안되는건 아니나 추후에 문제가 될 여지는 여전히 존재하므로!정확히!작성할 것!!

<iframe> 원하는 영상, 지도등을 삽입해 볼 수 있음!
※ 이미지, 동영상 저작권 및 안전한 것인지 확인! 꼭!

HTTPS는 HTTP의 암호화된 버전
1. 전송 중 변조될 가능성을 줄임
2. 상위 문서의 콘텐츠에 액세스하는 것을 방지하며 반대의 경우도 마찬가지로 적용

※ sandbox란? 컴퓨터 보안에서 시스템 오류 및 스프트웨어 취약성이 확산되는 것을 완하하기 위해 
	      실행 중인 프로그램을 분리하는 보안 메커니즘
sandbox="" 절대적으로 필요한 경우(속성 값 내부) 권한을 하나씩 다시 추가할 수 있다.

벡터 그래픽(파일 크기 ↓ 확장성 ↑ 큰 크기로 확대할때 픽셀화 X)
래스터 이미지
: 픽셀 격자 사용하여 정의, 픽셀이 배치될 정확한 위치와 정확히 어떤 색상이어야 하는지 보여주는 정보 포함
벡터 이미지 - 알고리즘
: 알고리즘 사용하여 정의, 화면에 렌더링될때 이미지가 어떻게 보일지 알아내기 위해 사용할 수 있는 모양 및 경로 정의 포함
==> 확대 시 선명도 및 픽셀화 차이

<td> 테이블 데이터
<tr> 테이블 행
<th> 표 머리글
=> 속성으로 colspan(열병합)과 rowspan(행병합) 존재

<table>
	<tr>
		<td>첫번째</td>
		<td>두번째</td>
		<td>세번째</td>
	</tr>
</table>

=> 동일한 속성을 준다면 <colgroup> <col 주고싶은 속성 /> </colgroup> 사용 

** 들여쓰기로 태그 간의 포함관계를 분리해주는 게 가독성에 좋다!
<br> 엔터공백
&nbsp 스페이스공백
=> html이 인식하는 공백은 스페이스 한번!나머지는 우리가 구분해줘야한다!
<mark> 글자에 형광펜 효과 주기!

<meta name =
author - 문서 제작자(content="선미")
description - 페이지에 대한 요약, 브라우저 즐겨찾기 페이지의 기본 설명 값(content="페이지요약")
keywords - 페이지의 콘텐츠와 관련된, 쉼표로 구분한 키워드 목록(content="강아지,고양이,호랑이)

<meta http-equiv="X-UA-Compatible" content="IE=edge">
		호환성관련설정		인터넷익스플로의 최신버전에 호환성을 맞추겠다

기기 별 뷰포트가 다르기때문에 발생하는 배율 문제에 대응하기위해 meta태그를 통해 뷰포트 관련 설정 추가할 수 있음!
<meta name="viewport" content="width=device-width, initial-scale=1.0">
	뷰포트의 너비를 단말기 너비에 맞추고, 초기 배율을 1로 한다!
