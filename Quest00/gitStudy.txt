https://opentutorials.org/module/3963/24442
↑학습할때 참고했던 사이트!!!모르는 부분 다시 참고하기

working directory 
- 내가 지금 사용하고 있는 컴퓨터에 있는 작업 디렉토리를 말함
- 각자 컴퓨터에서 어떤 파일들을 만들거나, 파일의 내용을 수정하였거나 등등 각자 어떠한 작업을 한 디렉토리

staging area
- 깃은 파일이 추가되고, 삭제되고, 수정되는 등 변경사항을 전부 파악할 수 있다.
- 변경사항이 있는 파일들 중 최종적으로 다음 단계인 local repo에 저장한 파일들을 저장할 수 있고
  우리가 설정한 파일들이 staging area에 임시적으로 저장됨

local repo
- 전 단계인 staging area의 파일들을 최종적으로 우리 컴퓨터에 저장하는 저장소
- 다음단계인 remote repo에 저장하기 전 단계
- remote repo는 원격 저장소라는 의미이고, 우리가 사용하기로 정했던 깃허브 저장소가 될 것임
- local repo는 원격 저장소에 저장하기 전에 마지막으로(최종적으로) 우리 컴퓨터에 저장되는 저장소가 되는 것

==> working directory에서 파일들을 수정하였고, 그 파일들 중 우리가 원하는 파일들을 임시적으로 staging area에서 파일들을 저장하였다.
      그리고 그 staging area에 있는 파일들을 대상으로 최종적으로 local repo에 저장하였다.
      local repo에 있는 파일들을 remote repo에 올리면 끝이 난다.

===> 원격저장소에서 우리의 작업 공간으로 가져오는 과정은 위에 설명했던 순서의 역순으로 생각하면 됨
	다만, staging area는 개념 자체가 working directory의 임시 파일들을 모아놓은 것이므로 역순으로
	가져올때에는 보통은 거치치 않는다.

**********************************************************************************************************************
**********************************************************************************************************************
*********************************************깃 초기 설정************************************************************

git을 설치한다(git bash가 있는지 확인할것!)
※ 깃 명령어 확인방법!! - git help -a => git의 명령어가 주르륵 나옴, 해당 설명과 함께(q를 눌러 종료함)
※ 깃 명령어 git help add하면 웹 브라우저에 git add에 대한 설명과 세부 옵션이 나옴!참고!

※ 깃 설정 - git config - 다양한 설정가능

git config --global user.name "name" => 이름설정
git config --global user.email "email address" => 이메일설정

제대로 입력됐는지 확인하기위한 명령어 - git config --list

**********************************************************************************************************************
**********************************************************************************************************************
*********************************************깃 기초명령어***********************************************************
git bash 붙여넣기는 shift + Ins 복사하기는 ctrl Ins

git clone으로 깃허브 

Git bash에 cd "디렉토리 복사한 주소"  (cd는 change directory 디렉토리를 변경한다는 리눅스 명령어)
Git clone에 내 깃허브  https 주소 가지고 오기 git clone 복사해온 주소

cd 디렉토리로 이동할 파일명 하면 우리가 가져왔던 파일을 확인할 수 있음
cat 파일명.확장자 하면 파일 내용을 확인할때 사용(하는 리눅스 명령어)

Git init 만든파일 밑에 .git디렉토리 만들어짐, 깃 시작하는거!
(Initialized empty Git repository in C:/Users/USER/study/Quest00/sandbox/.git/)

ls -l 디렉토리 내용을 알고 싶을때 (사용하는 리눅스 명령어)
ls는 현재 가지고 있는 파일들 보여줌

Git add 파일.확장자  하면 staging area로 옮겨짐
==> 파일확인했을때 빨간글씨로 나온게 초록색으로 바꼈다면 정상적으로 staging area로 이동 된것임
=====> 여기서 staging area로 이동된걸 local repo로 최종 저장해야된다.
 	이때 git commit을 사용해서 최종적으로 저장한다.
	(commit은 메세지를 반드시 입력해야된다! 입력 후 저장하고 에디터 종료)

그리고 git status를 입력해서 커밋할 것이 없는지 확인!

커밋한 내역을 확인하고 싶다면 git log를 하여 확인한다
(내가 커밋할때 입력한 메세지가 확인된다=>메세지 입력안하면 오류.,.아닌 오류 발생
 아니면 커밋할때 git commit -m "커밋내용"해도 되는 것 같음)

위의 경우까지 다 했다면 로컬 repo에 커밋되었으니, 원격 저장소로 저장하는 일만 남음
깃이 원격 주소를 알아야 저장 가능하니 주소설정이 제대로 되있는지 git remote -v로 확인한다.
git remote -v 
아무 것도 뜨지 않는다면 연결이 되어 있는 않는 것이다.

git remote add origin 깃허브repo주소
ex) git remote add orgin https://github.com/sunmiiii/study.git
	=> 만약 주소를 잘못입력했다면 기존 리포지토리 remote를 제거한다.
		 git remote remove origin

git push -u origin master 
원격 저장소로 저장
(master는 branch이름인데, 원격 저장소의 master 브랜치에 업로드 한다고 생각하면 됌!
 origin은 remote add할때 입력된 원격저장소 이름임)

==> 내가 원하는 위치에 파일 업로드가 안되있음ㅠ
       (cd로 파고파고 들어가다보면 ~/Desktop/test/study/Quest00/sandbox 요런식으로 만들 수 있음!)
	==> 기본 브랜치  git branch -m master main으로 변경되있는지확인하기!
		https://blog.outsider.ne.kr/1598
		(혹시 깃허브 자체에 디폴트값이 main인지 확인하기! settings에서 branches name확인!
		안되는 경우 pull해주면 되는데 pull도 안될경우에 push를 강제로해주면 된다
					하지만 강제로 하게 될 경우 데이터 유실이 발생할 수 있기때문에
					하지 않는 방법을 추천한다)


git clone 명령어는 원격 저장소의 복사본을 의미한다. 따라서 git commit을 통해 변경이력을 남겨도
원격 저장소에서 알 수 없다. 그래서 반드시 명시적으로 git push를 날려줘야, 그동안 로컬 저장소에 남겨놓은
코드 변경 이력들이 원격 저장소로 이송된다. (https://www.daleseo.com/git-push/)

https://beingdesigner.tistory.com/m/40


*** 내가 원하는 파일만 수정해서 다시 올릴려면 git add 원하는파일.확장자 후 commit하면 내가 수정한 것만 push됨!

